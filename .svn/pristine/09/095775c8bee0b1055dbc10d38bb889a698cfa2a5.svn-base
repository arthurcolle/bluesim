var SERVER_DEBUG =  true;

function ServerModel(a) {
    this.view = a;
    this.nservers = 1;
	this.distribution = "constant";
    this._params = null;
    this.UDO_selected = false;
	this.params = [null, null];
    this.maxqlen = -1;
    this.dest = this.entity = null;
    this.statTable = $("#server_stats").clone().attr("id", a.name);
    this.statTable.find("h2").text(a.name);
    $("#results").append(this.statTable);
    this.statRef = [
        this.statTable.find("#arrival"), 
        this.statTable.find("#drop"), 
        this.statTable.find("#sutil"), 
        this.statTable.find("#qtime"), 
        this.statTable.find("#stime"), 
        this.statTable.find("#qsize"), 
        this.statTable.find("#ssize"), 
        this.statTable.find("#qtimed"), 
        this.statTable.find("#stimed"),
        this.statTable.find("#qsized"), 
        this.statTable.find("#ssized")
    ];
	this.stat = {}
    this.view.image.attr({
		title:"Server #: "+ this.nservers + ", Distribution: " + this.distribution
        //todo some shit.
    })             
    if (SERVER_DEBUG) console.log("server: ServerModel");
}

ServerModel.prototype.jsonify = function() {
    return {
        nservers: this.nservers,
        maxqlen: this.maxqlen,
		distribution: this.distribution,
		params: this.params
    }
    if (SERVER_DEBUG) console.log("server: jsonify");

};

ServerModel.prototype.start = function() {
    this.entity = QueueApp.sim.addEntity(ServerEntity, this.distribution, this.params, this.nservers, this.maxqlen)
    if (SERVER_DEBUG) console.log("server: start");

};

ServerModel.prototype.connect = function() {
    this.entity.dest = this.dest ? this.dest.entity : null
    if (SERVER_DEBUG) console.log("server: connect");

};

ServerModel.prototype.showSettings = function() {
	pushToForm(this);
	var isUDO = this._params[0][1];
	var dist_UDO = this._params[0][2];
    var param1 = this._params[0][3];
    var param2 =  this._params[0][4];
    var queue_length = this._params[1][1];
    var num_servers = this._params[2][1];


    createServerForm();
    var a = $("#server_form");
    QueueApp.form_view = this.view;
    resetServer();
    //set parameters 
    if (this.UDO_selected){
        document.getElementById("use_udo_button").checked = true;
        a.find("#server_param_tr1").hide();
        a.find("#server_param_tr2").hide();
    } else {
        document.getElementById("use_function_button").checked = true;
        if (dist_UDO == "exponential" || dist_UDO == "constant" || dist_UDO == "pareto"){
            a.find("#server_param_tr1").val(param1).show();
            $("#server_param_tr2").hide(); 
        } else if (dist_UDO == "random") {
            $("#server_param_tr1").hide(); 
            $("#server_param_tr2").hide(); 
        } else {
            a.find("#server_param_tr1").val(param1).show();
            a.find("#server_param_tr2").val(param2).show();
        }
    }
    // get forms and insert the values into them
    a.find("#server_dropdown_1").val(dist_UDO);
    a.find("#server_queue_length").val(queue_length);
    a.find("#num_servers").val(num_servers);    
    a.find("#server_param1").val(param1);
    a.find("#server_param2").val(param2);


	a.show().position({
		of: $(this.view.image.node),
		at: "center center",
		my: "left top"
    });

    displayName(this, "server_name");
    if (SERVER_DEBUG) console.log("server: showSettings");
};

ServerModel.prototype.saveSettings = function() {
    
    var a = $("#server_form");
	
    this._params = [];

    var dist_UDO = null;
    var maxqlen = a.find("#server_queue_length").val();
    var num_servers = a.find("#num_servers").val();

     //uncomment after form is populated
     var d = document.getElementById("server_dropdown_1");
     dist_UDO = d.options[d.selectedIndex].value;

    var isUDO = true;
    var param1 = a.find("#server_param1").val();
    var param2 = a.find("#server_param2").val();
    
    if (!USE_UDO){
        isUDO = false;
    } 
    if(document.getElementById("use_udo_button").checked){
        this.UDO_selected = true;
    } else {
        this.UDO_selected = false;
    }
    
    this._params[0] = ["UDO", isUDO, dist_UDO, param1, param2];
    this._params[1] = ["const", maxqlen];
    this._params[2] = ["const", num_servers];

    //alert("maxqlen: " + maxqlen);
    this.view.image.attr({
        title: "Service rate = " + this.mu
    })

    rename(this, "server_name");
    if (SERVER_DEBUG) console.log("server: saveSettings");
	pullFromForm(this);
};

//change drop down menu options for user dynamically. 
//will load from LIST_OF_PARAMETERS for UDO option

function resetServer(){
    console.log("resetServer");
    var a = $("#server_form");

    if (this.UDO_selected){
        a.find("#server_dropdown_1").val(LIST_OF_PARAMETERS[0][0]);
        a.find("#server_queue_length").val("-1");
        a.find("#num_servers").val("1");
        a.find("#server_param1").val("").hide();
        a.find("#server_param2").val("").hide();
    } else {
        a.find("#server_dropdown_1").val("gaussian");
        a.find("#server_queue_length").val("-1");
        a.find("#num_servers").val("1");
        a.find("#server_param1").val("").show();
        a.find("#server_param2").val("").show();
    }
}

function createServerForm(){

    if(UPDATE_SERVER_FORM == null){
        console.log("createServerForm");
        populateServerForm();
        UPDATE_SERVER_FORM= "not null";
    }
}

function populateServerForm(){
    console.log("populateServerForm");

    var parentForm = document.getElementById("server_dropdown_1");
    var a = $("#server_form");

    for (var i = 0; i < 5; i++){
        a.find("#server_udo_"+i).val("").hide();
    }     
    if (USE_UDO){

         if(document.getElementById("use_udo_button").checked){
           
            $("#server_op1").hide();
            $("#server_op2").hide();
            $("#server_op3").hide();
            $("#server_op4").hide();
            $("#server_op5").hide();
            $("#server_op6").hide();
            $("#server_op7").hide();
            $("#server_param_tr1").hide(); 
            $("#server_param_tr2").hide();
            for (var i =0;i < LIST_OF_PARAMETERS.length;i++){
                a.find("#server_udo_"+i).text(LIST_OF_PARAMETERS[i][0]).show();
                a.find("#server_udo_"+i).val(LIST_OF_PARAMETERS[i][0])
            }
            a.find("#server_dropdown_1").val(LIST_OF_PARAMETERS[0][0]);
        } else {
            
            a.find("#server_dropdown_1").val("gaussian")
            $("#server_op1").show();
            $("#server_op2").show();
            $("#server_op3").show();
            $("#server_op4").show();
            $("#server_op5").show();
            $("#server_op6").show();
            $("#server_op7").show();
            $("#server_param_tr1").show(); 
            $("#server_param_tr2").show();
            
        }
       
    } else {
        
        a.find("#server_dropdown_1").val("gaussian")
        $("#server_op1").show();
        $("#server_op2").show();
        $("#server_op3").show();
        $("#server_op4").show();
        $("#server_op5").show();
        $("#server_op6").show();
        $("#server_op7").show();
        $("#server_param_tr1").show(); 
        $("#server_param_tr2").show(); 
    }
}

function serverDropper(){
    
    if (document.getElementById("use_function_button").checked){
        var e = document.getElementById("server_dropdown_1");
        var dropOption = e.options[e.selectedIndex].value;

    if (dropOption == "exponential" || dropOption == "constant" || 
            dropOption == "pareto"){ // param1 shows but param2 hidden
        $("#server_param_tr1").show(); 
        $("#server_param_tr2").hide(); 

    } else if (dropOption == "random"){ // param1 and param2 both are hidden
        $("#server_param_tr1").hide();
        $("#server_param_tr2").hide();
      
    } else {
        //for gaussian, weibull and gamma
        $("#server_param_tr1").show();  // Both parameters shows up
        $("#server_param_tr2").show();
    }

    }
}

function checkRadioButtonServer(){

    populateServerForm();

}

ServerModel.prototype.clearAndUpdateForm = function(){
    //var a = document.getElementById("source_form_to_append");
    //a.innerHTML = "";
    console.log("clear and update server");
    resetServer();
    populateServerForm(); 
}

ServerModel.prototype.initStats = function(){
	var a = this.entity.facility,
        b = a.queueStats().durationSeries,
        c = a.queueStats().sizeSeries,
        d = a.systemStats().durationSeries,
        e = a.systemStats().sizeSeries,
        a = a.usage() / QueueApp.sim.time() * 100;
	this.stat["arrival"]=["Arrived", this.entity.arrived];
	this.stat['dropped']=["Dropped", this.entity.dropped];
	this.stat["server use"]=["Usage %",a];
	this.stat["queue time average"]=["Average Time Spent in Queue", b.average()];
	this.stat["queue time deviation"]=["Deviation Time Spent in Queue", b.deviation()];
	this.stat["queue pop average"]=["Average Population in Queue", c.average()];
	this.stat["queue pop deviation"]=["Deviation Population in Queue", c.deviation()];
	this.stat["system time average"]=["Average Time Spent in System",d.average()];
	this.stat["system time deviation"]=["Deviation Time Spent in Entire System", d.deviation()];
	this.stat["system pop average"]=["Average Population in Entire System",e.average()];
	this.stat["system pop deviation"]=["Deviation Population in Entire System",e.deviation()];
	this.stat["queue total"]=["Total Queue Count", b.count()];
	this.stat["system total"]=["Total System Count", d.count()];
	for(var property in this.entity.dataCollector){
		if(this.entity.dataCollector.hasOwnProperty(property)){
			dC = this.entity.dataCollector[property]
			this.stat[property + " count"]=["["+property+"] Total", dC.count()]
			this.stat[property + " min"]=["["+property+"] Minimum Value", dC.min()]
			this.stat[property + " max"]=["["+property+"] Maximum Value", dC.max()]
			this.stat[property + " sum"]=["["+property+"] Sum of Values",dC.sum()]
			this.stat[property + " average"]=["["+property+"] Average Value",dC.average()]
			this.stat[property + " deviation"]=["["+property+"] Deviation",dC.deviation()]
		}
	}
}

ServerModel.prototype.showStats = function() {
	this.initStats();
	
    this.statRef[0].text(this.stat["arrival"][1]);	
    this.statRef[1].text(this.stat["dropped"][1]);
    this.statRef[2].text(this.stat["server use"][1].toFixed(1) + "%");
    this.statRef[3].text(this.stat["queue time average"][1].toFixed(3));
    this.statRef[4].text(this.stat["system time average"][1].toFixed(3));
    this.statRef[5].text(this.stat["queue pop average"][1].toFixed(3));
    this.statRef[6].text(this.stat["system pop average"][1].toFixed(3));
    this.statRef[7].text(this.stat["queue time deviation"][1].toFixed(3));
    this.statRef[8].text(this.stat["system time deviation"][1].toFixed(3));
    this.statRef[9].text(this.stat["queue pop deviation"][1].toFixed(3));
    this.statRef[10].text(this.stat["system pop deviation"][1].toFixed(3));
    this.view.showCounters(this.stat["queue total"][1], this.stat["system total"][1])
	
    //call animation manager funtion
    var value = this.stat["server use"][1].toFixed(1);
    stat_animation_manager(this.view.image.node.id, "queue", value);

    if (SERVER_DEBUG) console.log("server: showStats");
};

ServerModel.prototype.unlink = function() {
    this.statTable.remove();
    this.stat = this.view = this.statRef = null

    if (SERVER_DEBUG) console.log("server: unlink");

};

var ServerEntity = {
    start: function(a, b, c, d) {
		//Arguments: distribution, params, nservers, maxqlen
        this.facility = new Sim.Facility("queue", Sim.Facility.FCFS, c, d);
        this.arrived = this.dropped = 0
		this.distribution = a
		this.params = b
		//{property name:time series
		this.dataCollector={}
		for(i = LIST_OF_PARAMETERS.length -1;i >= 0; i--){
			this.dataCollector[LIST_OF_PARAMETERS[i][0]]=new Sim.TimeSeries()
		}		
		//debug
		this.remainder = 0
		this.udoval = []
    },
    onMessage: function(sender, message) {
        this.arrived++
		this.remainder++
		var timeval = 0
		if(this.distribution === "custom"){
			timeval = message.fields[this.params[0]]
		}else{
			timeval = randDist(this.distribution, this.params, QueueApp.random)
		}
		/* useFacility cannot handle timeval ≈ 0.  Make sure that timeval is >= 0.1*/
		timeval = (timeval < 0.1 ? Math.abs(timeval) + 0.1 : timeval)
		this.udoval.push(timeval)
		
		for(var property in message.fields){
				if(message.fields.hasOwnProperty(property)){
					this.dataCollector[property].record(message.fields[property],this.time());
				}
			}	
        this.useFacility(this.facility, timeval).done(this.completed, this, message)
    },
    completed: function(message) {
		this.remainder -= 1
        this.callbackMessage === -1 ? this.dropped++ : this.dest && this.send(message, 0, this.dest)
    }
};


