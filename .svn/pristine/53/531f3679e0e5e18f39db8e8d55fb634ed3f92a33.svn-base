
function SourceModel(a) {
    this.view = a;
    this.params = [null, null];
	this.distribution = 'random'
    this.dest = null;
	this.spawn = null
	this.udos = {}
    this.view.image.attr({
        title: "Parameters = " + this.params + " Distribution = " + this.distribution
    })
}

/* TODO */
SourceModel.prototype.jsonify = function() {
    return {
        params: this.params,
		distribution: this.distribution
    }
};

SourceModel.prototype.start = function() {
	/* ensure that the source is up-to-date on UDO params */
	this.update()
    this.entity = QueueApp.sim.addEntity(SourceEntity, this.params)
};

SourceModel.prototype.connect = function() {
    this.entity.dest = this.dest ? this.dest.entity : null
};

/* 
* in QueueApp whenever fields of UDO are changed, 
* must called this function on all Source models 
* every is set to default here
*
* HERE
* every time user wants to edit params of the source
*/
SourceModel.prototype.update = function() {
	/* check for stale properties in the udos dictionary */
	for(var property in this.udos){
		var flag = false;
		for(var i = 0; i < LIST_OF_PARAMETERS.length; i++){
			if(LIST_OF_PARAMETERS[i][0] == property)
				flag = true;
		}
		if(!flag){
			delete this.udos[property];
		}
	}
	/* check for new properties */
	for(var i = 0; i < LIST_OF_PARAMETERS.length; i++){
		var name = LIST_OF_PARAMETERS[i][0];
		var type = LIST_OF_PARAMETERS[i][1];
		/* check existence of field */
		if(this.udos[name]){
			/* check for update of field type */
			if(!this.udos[name][type]){
				/* update */
				this.udos[name] = {
					type: type,
					dist: 'random',
					params: LIST_OF_DISTRIBUTIONS['random'],
					boolBase: this.udos[name][boolBase],
				}
			}
		}
		/* create new entry in udo dictionary */
		else{
			this.udos[name] = {
				type: type,
				dist: 'random',
				params: LIST_OF_DISTRIBUTIONS['random'],
				boolBase: 0
			}
		}
		/* update divs
		var a = $("#source_form");
		var id_name = "source_form_field_" + name + "_distribution";
		var id_param1 = "source_form_field_" + name + "_param1"
		var id_param2 = "source_form_field_" + name + "_param2"
		if(!a.find("#"+id_name)){
			var table = $("#"+id_name + " table");
			table.append("<tr><td><label for={0}>{1}</label></td><td><input type='text' name={0} id={0} value='' class='text ui-widget-content ui-corner-all'></td>	</tr>".format(id_name, name));
			table.append("<tr>
			<td><label for={0}></td>
			<td></td>
			</tr>
		}
		*/
	}
}

/* TODO */
SourceModel.prototype.showSettings = function() {
	this.update();
	/* front end team needs to promise us divs to access */

    var a = $("#source_form");
    QueueApp.form_view = this.view;
    a.find("#source_form_distribution").val(this.distribution);
	var paramsLength = LIST_OF_DISTRIBUTIONS(this.distribution);
	if(paramsLength == 2){
		a.find("#source_form_param1").val(this.params[0])
		a.find("#source_form_param2").val(this.params[1])
	}
	else if(paramsLength == 1){
		a.find("#source_form_param1").val(this.params[0])
	}
	for(var i = 0; i < LIST_OF_PARAMETERS.length; i++){
		var name = LIST_OF_PARAMETERS[i][0];
		var id_name = "#source_form_field" + name;
		a.find(id_name).val(this.udos[name]);
	}
	a.find("#source_form_spawn").val(this.spawn)
    a.show().position({
        of: $(this.view.image.node),
        at: "center center",
        my: "left top"
    })
};

SourceModel.prototype.saveSettings = function() {
	/* front end needs to promise us divs to access */
    a = $("#source_form")
	this.distribution = a.find("#source_form_distribution").val();
	this.params = [];
	this.params.push(a.find("#source_form_param1").val());
	this.params.push(a.find("#source_form_param2").val());
	switch(this.distribution){
		case "exponential":
			this.params = [this.params[0], null]
			break
		case "random":
			this.params = [null, null];
			break
		case "gaussian":
			this.params = [this.params[0], this.params[1]];
			break
	}
	this.spawn = a.find("#source_form_spawn").val()
    this.view.image.attr({
        title: "Parameters = " + this.params + " Distribution = " + this.distribution
    })
};

SourceModel.prototype.unlink = function() {
    this.view = null
};

SourceModel.prototype.showStats = function() {
    this.view.showCounters(NaN, this.entity.generated)

    //call animation manager funtion
   // var value = a.toFixed(1);
    stat_animation_manager(this.view.image.node.id, "source", 100);
};

var SourceEntity = {
    start: function(a) {
        this.params = a;
		this.message = new Data();
        this.setTimer(0).done(this.traffic);
        this.generated = 0
    },
	/* actual data generation */
    traffic: function() {
		if(!this.dest){
			return;
		}
		this.message.timer = this.time()
		for(var property in this.message.fields){
			if(this.message.fields.hasOwnProperty(property)){
				this.message.fields[property] = randDist(
					this.udos[property].dist,
					this.udos[property].params,
					QueueApp.random
				);
				/* check for boolean */
				if(this.udos[property][type] == "boolean")
					this.message.fields[property] = 
						(this.message.fields[property] > this.udos[property][boolBase]) ? 
							true : false;
			}
		}
        this.send(this.message,0,this.dest)
		this.generated++
		var _rand = randDist(this.distribution, this.params, QueueApp.random)
		this.setTimer(_rand).done(this.traffic)
    }
};
