April 5

	To change the size of the canvas space need to change parameters in:
		- reset function in queueing-min.js
		- ImageView.prototype.moveto function in image-view.js
		- Split3View.prototype.moveto in split3.js
		- SplitterView.prototype.moveto in splitter.js
	(Recommend using a global variable in next edit)

	Added the functionality of a simulation bar that was missing before


April 20

	Functions and variables explained from Source.js

SOURCE
	

	this.updateForm = null; // 

	createForm() - calls populateForm() "if (this.updateForm == null).  it then sets updateForm to value
		to prevent it from being called everytime a function the source model showSettings() is called.

	populateForm() creates a new form based on specs from UDO.  If UDO is not being
		used then we need to have a default form that is created instead (still needs to be hashed out)
	TODO - should check "if (LIST_OF_PARAMETERS != 0) to create the form correctly, currently set up with wrong
		condition for testing purposes

	clearAndUpdateForm() - gets the div for source_form and clears the innerHTML.  it then calls populateForm()
		

The preceding functions are primitve as they do not attempt to repopulate the parameters with user input if stored.  

HOW TO HANDLE CASE: using UDO vs. Ping

SOlution:
	the div for source_form has been gutted to not include any input form data.  One approach to this might be to have 
	one distribution, paramaters table already staticly typed under the parent node "source_form_to_add" that will follow
	naming convetion for new divs used in populateForm() ie source_table_0, source_dropdown_0.  

Problem: 
	if UDO created with one field we still need to discriminate between using an UDO or ping...... 

Solution2: 
	Global value that can be set by user in UDO? for example, in the UDO pop-up box could we have a radio button saying 				to "use" or "not use" udo that will turn the flag on/off?


Udo_manager.js
	
	TODO
		- need to have a way to save and show state like the functions that exist for other entities. May make sense
		to think of UDO as a single existence entitity, implementing it like the other entitity models with most of the 
		code ripped from there...

SIMPLE ANIMATION IDEA

	using D3 and preloaded images of entities (each with different colors to represent usage perhaps) can swap images
	to make the transitions more seamless can do the following in order.  change opactity to 0 then change href to desired
	image and then change opacity back to 100 with a an animation using duration().
		